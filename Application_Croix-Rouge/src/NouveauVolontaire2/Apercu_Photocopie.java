/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package NouveauVolontaire2;

import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;

/**
 *
 * @author Greenlamp
 */
public class Apercu_Photocopie extends javax.swing.JDialog {

    /**
     * Creates new form Apercu_Photocopie
     */
    byte[] photocopie = null;
    int hauteur = 700;
    int largeur = 500;
    public Apercu_Photocopie(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.photocopie = null;
    }

    public Apercu_Photocopie(java.awt.Frame parent, boolean modal, byte[] photocopie) {
        super(parent, modal);
        initComponents();
        this.photocopie = photocopie;
        afficherImage();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Gimage = new javax.swing.JPanel();
        Glabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        javax.swing.GroupLayout GimageLayout = new javax.swing.GroupLayout(Gimage);
        Gimage.setLayout(GimageLayout);
        GimageLayout.setHorizontalGroup(
            GimageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(GimageLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Glabel)
                .addContainerGap(490, Short.MAX_VALUE))
        );
        GimageLayout.setVerticalGroup(
            GimageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(GimageLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Glabel)
                .addContainerGap(687, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Gimage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Gimage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-528)/2, (screenSize.height-750)/2, 528, 750);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Apercu_Photocopie.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Apercu_Photocopie.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Apercu_Photocopie.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Apercu_Photocopie.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Apercu_Photocopie dialog = new Apercu_Photocopie(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Gimage;
    private javax.swing.JLabel Glabel;
    // End of variables declaration//GEN-END:variables

    private void afficherImage() {
        if(photocopie == null){
            return;
        }
        ImageIcon icon = new ImageIcon(photocopie);
        icon = resizeIcon(icon);
        Glabel.setIcon(icon);
    }

    private ImageIcon resizeIcon(ImageIcon icon) {
        int iconHeight = icon.getIconHeight();
        int iconWidth = icon.getIconWidth();

        if(iconHeight > hauteur){
            float ratio = (float)(iconHeight * 1.0) / (float)(hauteur * 1.0);
            iconHeight = Math.round(iconHeight / ratio);
            iconWidth = Math.round(iconWidth / ratio);
        }

        if(iconWidth > largeur){
            float ratio = (float)(iconWidth * 1.0) / (float)(largeur * 1.0);
            iconWidth = Math.round(iconWidth / ratio);
            iconHeight = Math.round(iconHeight / ratio);
        }

        Image img = icon.getImage();
        BufferedImage bi = new BufferedImage(img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB);
        Graphics g = bi.createGraphics();
        g.drawImage(img, 0, 0, iconWidth, iconHeight, null);
        ImageIcon newIcon = new ImageIcon(bi);
        return newIcon;
    }
}
