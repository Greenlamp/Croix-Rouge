/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI.Panels.Recherche;

import Containers.CelluleGrille;
import Containers.Grille;
import Containers.Key;
import GUI.Panels.Main;
import Helpers.SwingUtils;
import SSL.NetworkClientSSL;
import my.cr.PacketCom.PacketCom;
import States.States;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.LinkedList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import my.LibCritereAndroid.Recherche.Critere;
import my.LibCritereAndroid.Recherche.TupleRecherche;

/**
 *
 * @author Greenlamp
 */
public class M_SearchCrit extends javax.swing.JPanel {

    /**
     * Creates new form M_SearchCrit
     */
    Main parent = null;
    NetworkClientSSL socket = null;
    LinkedList<TupleRecherche> listeVolontaire = null;
    LinkedList<Critere> listeCriteres = null;
    String type = "grille";
    int cpt = 0;
    public M_SearchCrit(Main parent, NetworkClientSSL socket) {
        initComponents();
        this.socket = socket;
        this.parent = parent;
        comboAnnee();
        listeCriteres = new LinkedList<Critere>();
        getListeFormation();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        Baccueil = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        GlisteCriteres = new javax.swing.JList();
        Bretirer = new javax.swing.JButton();
        Bvider = new javax.swing.JButton();
        Brechercher = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        Gresultat = new javax.swing.JTable();
        Go = new javax.swing.JRadioButton();
        Gi = new javax.swing.JRadioButton();
        Ge = new javax.swing.JRadioButton();
        Gt = new javax.swing.JRadioButton();
        Gm = new javax.swing.JRadioButton();
        Glundi = new javax.swing.JCheckBox();
        Gmardi = new javax.swing.JCheckBox();
        Gmercredi = new javax.swing.JCheckBox();
        Gjeudi = new javax.swing.JCheckBox();
        Gvendredi = new javax.swing.JCheckBox();
        Gsamedi = new javax.swing.JCheckBox();
        Gdimanche = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        Gnom = new javax.swing.JTextField();
        Gprenom = new javax.swing.JTextField();
        Bajouter = new javax.swing.JButton();
        Gformation = new javax.swing.JComboBox();
        Gamu = new javax.swing.JCheckBox();
        Gtms = new javax.swing.JCheckBox();
        Gvsl = new javax.swing.JCheckBox();
        Gtpmr = new javax.swing.JCheckBox();
        GcodePostal = new javax.swing.JTextField();
        Gannee = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        Gmois = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        Gjour = new javax.swing.JComboBox();
        Gpermanent = new javax.swing.JCheckBox();
        Gvolontaire = new javax.swing.JCheckBox();
        GdotNom = new javax.swing.JCheckBox();
        GdotPrenom = new javax.swing.JCheckBox();
        GdotDateNaissance = new javax.swing.JCheckBox();
        GdotFormation = new javax.swing.JCheckBox();
        GdotCp = new javax.swing.JCheckBox();

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Recherche de volontaire selon critère(s)");

        Baccueil.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Baccueil.setForeground(new java.awt.Color(0, 0, 255));
        Baccueil.setText("ACCUEIL");
        Baccueil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BaccueilActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton2.setText("Retour");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Baccueil)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(Baccueil)
                    .addComponent(jButton2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(153, 153, 153));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Critères choisis");

        jScrollPane2.setViewportView(GlisteCriteres);

        Bretirer.setText("Retirer");
        Bretirer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BretirerActionPerformed(evt);
            }
        });

        Bvider.setText("Vider");
        Bvider.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BviderActionPerformed(evt);
            }
        });

        Brechercher.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Brechercher.setText("Rechercher");
        Brechercher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BrechercherActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton1.setText("Changer Paramètres");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 330, Short.MAX_VALUE)
                    .addComponent(Bretirer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Bvider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Brechercher, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 455, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Bretirer)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Bvider)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Brechercher, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel3.setBackground(new java.awt.Color(153, 153, 153));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Resultat");

        Gresultat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nom", "Prénom"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Gresultat.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                GresultatMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(Gresultat);

        Go.setBackground(new java.awt.Color(153, 153, 153));
        buttonGroup3.add(Go);
        Go.setText("Observation(o)");

        Gi.setBackground(new java.awt.Color(153, 153, 153));
        buttonGroup3.add(Gi);
        Gi.setText("Intégration(i)");

        Ge.setBackground(new java.awt.Color(153, 153, 153));
        buttonGroup3.add(Ge);
        Ge.setText("Epamu(e)");

        Gt.setBackground(new java.awt.Color(153, 153, 153));
        buttonGroup3.add(Gt);
        Gt.setText("Tms(t)");

        Gm.setBackground(new java.awt.Color(153, 153, 153));
        buttonGroup3.add(Gm);
        Gm.setText("Militaire(m)");

        Glundi.setBackground(new java.awt.Color(153, 153, 153));
        Glundi.setText("Lundi");

        Gmardi.setBackground(new java.awt.Color(153, 153, 153));
        Gmardi.setText("Mardi");

        Gmercredi.setBackground(new java.awt.Color(153, 153, 153));
        Gmercredi.setText("Mercredi");

        Gjeudi.setBackground(new java.awt.Color(153, 153, 153));
        Gjeudi.setText("Jeudi");

        Gvendredi.setBackground(new java.awt.Color(153, 153, 153));
        Gvendredi.setText("Vendredi");

        Gsamedi.setBackground(new java.awt.Color(153, 153, 153));
        Gsamedi.setText("Samedi");

        Gdimanche.setBackground(new java.awt.Color(153, 153, 153));
        Gdimanche.setText("Dimanche");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 528, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(Glundi)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Gmardi)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Gmercredi)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Gjeudi)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Gvendredi)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Gsamedi)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Gdimanche))
                            .addComponent(jLabel4)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(Go)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Gi)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Ge)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Gt)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Gm)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Go)
                    .addComponent(Gi)
                    .addComponent(Ge)
                    .addComponent(Gt)
                    .addComponent(Gm))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Glundi)
                    .addComponent(Gmardi)
                    .addComponent(Gmercredi)
                    .addComponent(Gjeudi)
                    .addComponent(Gvendredi)
                    .addComponent(Gsamedi)
                    .addComponent(Gdimanche))
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 538, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel4.setBackground(new java.awt.Color(153, 153, 153));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Critères");

        Gnom.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                GnomMouseClicked(evt);
            }
        });

        Gprenom.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                GprenomMouseClicked(evt);
            }
        });

        Bajouter.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        Bajouter.setText("Ajouter le critère à la liste");
        Bajouter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BajouterActionPerformed(evt);
            }
        });

        Gformation.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                GformationMouseClicked(evt);
            }
        });

        Gamu.setBackground(new java.awt.Color(153, 153, 153));
        Gamu.setText("Chauffeur amu/112");

        Gtms.setBackground(new java.awt.Color(153, 153, 153));
        Gtms.setText("Chauffeur tms/105");

        Gvsl.setBackground(new java.awt.Color(153, 153, 153));
        Gvsl.setText("Chauffeur vsl");
        Gvsl.setEnabled(false);

        Gtpmr.setBackground(new java.awt.Color(153, 153, 153));
        Gtpmr.setText("Chauffeur tpmr");
        Gtpmr.setEnabled(false);

        GcodePostal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                GcodePostalMouseClicked(evt);
            }
        });

        jLabel8.setText("/");

        Gmois.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));

        jLabel7.setText("/");

        Gjour.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));
        Gjour.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                GjourMouseClicked(evt);
            }
        });

        Gpermanent.setBackground(new java.awt.Color(153, 153, 153));
        Gpermanent.setText("Permanent");

        Gvolontaire.setBackground(new java.awt.Color(153, 153, 153));
        Gvolontaire.setText("Volontaire");

        GdotNom.setBackground(new java.awt.Color(153, 153, 153));
        GdotNom.setText("Selon le nom");

        GdotPrenom.setBackground(new java.awt.Color(153, 153, 153));
        GdotPrenom.setText("Selon le prénom");

        GdotDateNaissance.setBackground(new java.awt.Color(153, 153, 153));
        GdotDateNaissance.setText("Selon la date de naissance");

        GdotFormation.setBackground(new java.awt.Color(153, 153, 153));
        GdotFormation.setText("Selon la formation");

        GdotCp.setBackground(new java.awt.Color(153, 153, 153));
        GdotCp.setText("Selon le code postal");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Gnom)
                    .addComponent(Gprenom)
                    .addComponent(Bajouter, javax.swing.GroupLayout.DEFAULT_SIZE, 330, Short.MAX_VALUE)
                    .addComponent(Gformation, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(GcodePostal)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(GdotCp)
                            .addComponent(GdotFormation)
                            .addComponent(GdotDateNaissance)
                            .addComponent(GdotPrenom)
                            .addComponent(GdotNom)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Gamu)
                                    .addComponent(Gvsl))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Gtms)
                                    .addComponent(Gtpmr)))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(Gjour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Gmois, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Gannee, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(Gvolontaire)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Gpermanent))
                            .addComponent(jLabel2))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(GdotNom)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Gnom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(GdotPrenom)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Gprenom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(GdotDateNaissance)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Gjour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(Gmois, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(Gannee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(GdotFormation)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Gformation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Gamu)
                    .addComponent(Gtms))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Gvsl)
                    .addComponent(Gtpmr))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(GdotCp)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(GcodePostal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Gpermanent)
                    .addComponent(Gvolontaire))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Bajouter, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void BajouterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BajouterActionPerformed
        if(GdotNom.isSelected()){
            AjouterCritereNom();
            GdotNom.setSelected(false);
            Gnom.setText(null);
        }else if(GdotPrenom.isSelected()){
            AjouterCriterePrenom();
            GdotPrenom.setSelected(false);
            Gprenom.setText(null);
        }else if(GdotDateNaissance.isSelected()){
            AjouterCritereDateNaissance();
            GdotDateNaissance.setSelected(false);
        }else if(GdotFormation.isSelected()){
            AjouterCritereFormation();
            GdotFormation.setSelected(false);
        }else if(GdotCp.isSelected()){
            AjouterCritereCodePostal();
            GdotCp.setSelected(false);
            GcodePostal.setText(null);
        }
        if(Gpermanent.isSelected()){
            ajouterCriterePermanent(true);
            Gpermanent.setSelected(false);
        }
        if(Gvolontaire.isSelected()){
            ajouterCriterePermanent(false);
            Gvolontaire.setSelected(false);
        }
        if(Gamu.isSelected()){
            ajouterCriterePermis("amu");
            Gamu.setSelected(false);
        }
        if(Gtms.isSelected()){
            ajouterCriterePermis("tms");
            Gtms.setSelected(false);
        }
        if(Gtms.isSelected()){
            ajouterCriterePermis("vsl");
            Gtms.setSelected(false);
        }
        if(Gtpmr.isSelected()){
            ajouterCriterePermis("tpmr");
            Gtpmr.setSelected(false);
        }
    }//GEN-LAST:event_BajouterActionPerformed

    private void BretirerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BretirerActionPerformed
        if(listeCriteres.isEmpty()){
            return;
        }
        String selected = (String)GlisteCriteres.getSelectedValue();
        if(selected == null){
            return;
        }
        String[] split = selected.split("-");
        int numero = Integer.parseInt(split[1]);
        int cpt = 0;
        for(Critere elm : listeCriteres){
            if(elm.getNumero() == numero){
                listeCriteres.remove(cpt);
                SwingUtils.removeToList(GlisteCriteres, selected);
            }else{
                cpt++;
            }
        }
    }//GEN-LAST:event_BretirerActionPerformed

    private void BviderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BviderActionPerformed
        if(listeCriteres.isEmpty()){
            return;
        }
        SwingUtils.emptyList(GlisteCriteres);
        listeCriteres.clear();
    }//GEN-LAST:event_BviderActionPerformed

    private void BrechercherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrechercherActionPerformed
        if(listeCriteres.size() == 0){
            return;
        }
        PacketCom packet = null;
        if(type.equals("grille")){
            LinkedList<Object[]> dates = getDates();
            Object[] data = {listeCriteres, dates};
            packet = new PacketCom(States.RECHERCHE, (Object)data);
        }
        socket.send(packet);
        try {
            PacketCom packetReponse = socket.receive();
            String type = packetReponse.getType();
            if(type.equals(States.RECHERCHE_OUI)){
                TraitementResultat((LinkedList<TupleRecherche>) packetReponse.getObjet());
            }else if(type.equals(States.RECHERCHE_NON)){
                String message = (String) packetReponse.getObjet();
                parent.afficherMessage(message);
            }
        } catch (Exception ex) {
            //Logger.getLogger(Wizard_Nouveau.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_BrechercherActionPerformed

    private void BaccueilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BaccueilActionPerformed
        parent.changeState(Main.LOGGED);
    }//GEN-LAST:event_BaccueilActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Grille grille = parent.getGrille();
        parent.setGrille(grille);
        parent.changeState(Main.EDITNEWGRILLLE);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void GresultatMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GresultatMouseClicked
        if(evt.getClickCount() == 2){
            String lettre = getLettre();
            int row = Gresultat.getSelectedRow();
            String nom = Gresultat.getValueAt(row, 0).toString() + " " + Gresultat.getValueAt(row, 1).toString() + " (" + lettre + ")";
            int rowGrille = parent.getCelluleRow();
            int columnGrille = parent.getCelluleColumn();
            Grille grille = parent.getGrille();
            attribuerVolontaire(grille, rowGrille, columnGrille, nom);
            parent.setGrille(grille);
            parent.changeState(Main.EDITNEWGRILLLE);
        }
    }//GEN-LAST:event_GresultatMouseClicked

    private void GnomMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GnomMouseClicked
        GdotNom.setSelected(true);
    }//GEN-LAST:event_GnomMouseClicked

    private void GprenomMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GprenomMouseClicked
        GdotPrenom.setSelected(true);
    }//GEN-LAST:event_GprenomMouseClicked

    private void GcodePostalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GcodePostalMouseClicked
        GdotCp.setSelected(true);
    }//GEN-LAST:event_GcodePostalMouseClicked

    private void GjourMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GjourMouseClicked
        GdotDateNaissance.setSelected(true);
    }//GEN-LAST:event_GjourMouseClicked

    private void GformationMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GformationMouseClicked
        GdotFormation.setSelected(true);
    }//GEN-LAST:event_GformationMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        enableJours(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Baccueil;
    private javax.swing.JButton Bajouter;
    private javax.swing.JButton Brechercher;
    private javax.swing.JButton Bretirer;
    private javax.swing.JButton Bvider;
    private javax.swing.JCheckBox Gamu;
    private javax.swing.JComboBox Gannee;
    private javax.swing.JTextField GcodePostal;
    private javax.swing.JCheckBox Gdimanche;
    private javax.swing.JCheckBox GdotCp;
    private javax.swing.JCheckBox GdotDateNaissance;
    private javax.swing.JCheckBox GdotFormation;
    private javax.swing.JCheckBox GdotNom;
    private javax.swing.JCheckBox GdotPrenom;
    private javax.swing.JRadioButton Ge;
    private javax.swing.JComboBox Gformation;
    private javax.swing.JRadioButton Gi;
    private javax.swing.JCheckBox Gjeudi;
    private javax.swing.JComboBox Gjour;
    private javax.swing.JList GlisteCriteres;
    private javax.swing.JCheckBox Glundi;
    private javax.swing.JRadioButton Gm;
    private javax.swing.JCheckBox Gmardi;
    private javax.swing.JCheckBox Gmercredi;
    private javax.swing.JComboBox Gmois;
    private javax.swing.JTextField Gnom;
    private javax.swing.JRadioButton Go;
    private javax.swing.JCheckBox Gpermanent;
    private javax.swing.JTextField Gprenom;
    private javax.swing.JTable Gresultat;
    private javax.swing.JCheckBox Gsamedi;
    private javax.swing.JRadioButton Gt;
    private javax.swing.JCheckBox Gtms;
    private javax.swing.JCheckBox Gtpmr;
    private javax.swing.JCheckBox Gvendredi;
    private javax.swing.JCheckBox Gvolontaire;
    private javax.swing.JCheckBox Gvsl;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables

    private void AjouterCritereNom() {
        String nom = Gnom.getText();
        cpt++;
        String mot = "-"+cpt+"- Nom -> " + nom;
        SwingUtils.addToList(GlisteCriteres, mot);
        listeCriteres.add(new Critere(cpt, "nom", nom));
    }

    private void AjouterCriterePrenom() {
        String prenom = Gprenom.getText();
        cpt++;
        String mot = "-"+cpt+"- Prenom -> " + prenom;
        SwingUtils.addToList(GlisteCriteres, mot);
        listeCriteres.add(new Critere(cpt, "prenom", prenom));
    }

    private void AjouterCritereDateNaissance() {
        String jour = Gjour.getSelectedItem().toString();
        String mois = Gmois.getSelectedItem().toString();
        String annee = Gannee.getSelectedItem().toString();
        String dateNaissance = jour + "/" + mois + "/" + annee;
        if(EasyDate.EasyDate.isValidDate(dateNaissance, null)){
            cpt++;
            String mot = "-"+cpt+"- Date de naissance -> " + dateNaissance;
            SwingUtils.addToList(GlisteCriteres, mot);
            listeCriteres.add(new Critere(cpt, "dateNaissance", dateNaissance));
        }else{
            parent.afficherMessage("date invalide");
        }
    }

    private void AjouterCritereFormation() {
        if(Gformation.getItemCount() == 0){
            parent.afficherMessage("Aucunes formations disponibles");
            return;
        }
        String formation = Gformation.getSelectedItem().toString();
        cpt++;
        String mot = "-" + cpt + "- Formation -> " + formation;
        SwingUtils.addToList(GlisteCriteres, mot);
        listeCriteres.add(new Critere(cpt, "formation", formation));
    }

    private void AjouterCritereCodePostal() {
        String codePostal = GcodePostal.getText();
        if(codePostal != null && !codePostal.isEmpty()){
            try{
                Integer.parseInt(codePostal);
            }catch(Exception ex){
                parent.afficherMessage("code postal invalide");
                return;
            }
        }
        cpt++;
        String mot = "-" + cpt + "- Code Postal -> " + codePostal;
        SwingUtils.addToList(GlisteCriteres, mot);
        listeCriteres.add(new Critere(cpt, "codePostal", codePostal));
    }

    private void ajouterCriterePermanent(boolean permanent) {
        cpt++;
        String mot = "-"+cpt+"- type -> " + (permanent ? "permanent" : "volontaire");
        SwingUtils.addToList(GlisteCriteres, mot);
        listeCriteres.add(new Critere(cpt, "permanent", (permanent ? "permanent" : "volontaire")));
    }

    private void ajouterCriterePermis(String type) {
        cpt++;
        String mot = "-"+cpt+"- permis -> " + type;
        SwingUtils.addToList(GlisteCriteres, mot);
        listeCriteres.add(new Critere(cpt, "permis", type));
    }

    private void TraitementResultat(LinkedList<TupleRecherche> listeResultat) {
        listeResultat = retraitVolontaireDejaAttribute(listeResultat);
        SwingUtils.emptyTable(Gresultat);
        for(TupleRecherche tuple : listeResultat){
            Vector vector = new Vector();
            vector.add(tuple.getNom());
            vector.add(tuple.getPrenom());
            SwingUtils.addToTable(Gresultat, vector);
        }
        enableJours(false);
    }

    private void getListeFormation() {
        PacketCom packet = new PacketCom(States.GET_LISTE_FORMATIONS, null);
        socket.send(packet);
        try {
            PacketCom packetReponse = socket.receive();
            String type = packetReponse.getType();
            if(type.equals(States.GET_LISTE_FORMATIONS_OUI)){
                for(String elm : (LinkedList<String>)packetReponse.getObjet()){
                    SwingUtils.addToComboBox(Gformation, elm);
                }
            }else if(type.equals(States.NOUVEAU_VOLONTAIRE_NON)){
                String message = (String) packetReponse.getObjet();
                parent.afficherMessage(message);
            }
        } catch (Exception ex) {
            //Logger.getLogger(Wizard_Nouveau.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private String getLettre() {
        if(Go.isSelected()){
            return "o";
        }else if(Gi.isSelected()){
            return "i";
        }else if(Ge.isSelected()){
            return "e";
        }else if(Gt.isSelected()){
            return "t";
        }else if(Gm.isSelected()){
            return "m";
        }else{
            return "*";
        }
    }

    private void attribuerVolontaire(Grille grille, int rowGrille, int columnGrille, String nom) {
        LinkedList<Integer> columnsJour = new LinkedList<Integer>();
        columnsJour.add(columnGrille);
        if(Glundi.isSelected()){
            if(!columnsJour.contains(1)){
                columnsJour.add(1);
            }
        }
        if(Gmardi.isSelected()){
            if(!columnsJour.contains(2)){
                columnsJour.add(2);
            }
        }
        if(Gmercredi.isSelected()){
            if(!columnsJour.contains(3)){
                columnsJour.add(3);
            }
        }
        if(Gjeudi.isSelected()){
            if(!columnsJour.contains(4)){
                columnsJour.add(4);
            }
        }
        if(Gvendredi.isSelected()){
            if(!columnsJour.contains(5)){
                columnsJour.add(5);
            }
        }
        if(Gsamedi.isSelected()){
            if(!columnsJour.contains(6)){
                columnsJour.add(6);
            }
        }
        if(Gdimanche.isSelected()){
            if(!columnsJour.contains(7)){
                columnsJour.add(7);
            }
        }
        for(int columnJour : columnsJour){
            CelluleGrille cellule = grille.getValueAt(rowGrille, columnJour);
            if(cellule.getNomPrenom() == null || cellule.getNomPrenom().isEmpty()){
                grille.setNom(rowGrille, columnJour, nom);
            }
        }
    }

    private void comboAnnee() {
        String annéeToday = new SimpleDateFormat("yyyy").format(new Date());
        int année = Integer.parseInt(annéeToday);
        for(int i=année; i>=1920; i--){
            Gannee.addItem(i);
        }
    }

    private LinkedList<Object[]> getDates() {
        LinkedList<Object[]> dates = new LinkedList<Object[]>();
        LinkedList<Integer> columnsJour = new LinkedList<Integer>();
        int columnGrille = parent.getCelluleColumn();

        columnsJour.add(columnGrille);
        if(Glundi.isSelected()){
            if(!columnsJour.contains(1)){
                columnsJour.add(1);
            }
        }
        if(Gmardi.isSelected()){
            if(!columnsJour.contains(2)){
                columnsJour.add(2);
            }
        }
        if(Gmercredi.isSelected()){
            if(!columnsJour.contains(3)){
                columnsJour.add(3);
            }
        }
        if(Gjeudi.isSelected()){
            if(!columnsJour.contains(4)){
                columnsJour.add(4);
            }
        }
        if(Gvendredi.isSelected()){
            if(!columnsJour.contains(5)){
                columnsJour.add(5);
            }
        }
        if(Gsamedi.isSelected()){
            if(!columnsJour.contains(6)){
                columnsJour.add(6);
            }
        }
        if(Gdimanche.isSelected()){
            if(!columnsJour.contains(7)){
                columnsJour.add(7);
            }
        }

        CelluleGrille cellule = parent.getGrille().getValueAt(parent.getCelluleRow(), parent.getCelluleColumn());
        GregorianCalendar gc = new GregorianCalendar();
        int annee = parent.getGrille().getAnnee();
        int semaine = parent.getGrille().getSemaine();
        gc.set(GregorianCalendar.YEAR, annee);
        gc.set(GregorianCalendar.WEEK_OF_YEAR, semaine);
        for(int numJour : columnsJour){
            gc.set(GregorianCalendar.DAY_OF_WEEK, numJour+1);
            Date foundDate = gc.getTime();
            Date heureDebut = cellule.getHeureDebut();
            Date heureFin = cellule.getHeureFin();
            dates.add(new Object[] {foundDate, heureDebut, heureFin});
        }
        return dates;
    }

    private LinkedList<TupleRecherche> retraitVolontaireDejaAttribute(LinkedList<TupleRecherche> listeResultat) {
        LinkedList<TupleRecherche> copie = new LinkedList<TupleRecherche>();
        CelluleGrille elmSelected = parent.getGrille().getValueAt(parent.getCelluleRow(), parent.getCelluleColumn());
        copie.addAll(listeResultat);

        for(Key key : parent.getGrille().getGrilles()){
            CelluleGrille cellule = key.getValue();
            Date date = cellule.getDate();
            Date heureDebut = cellule.getHeureDebut();
            Date heureFin = cellule.getHeureFin();
            String nomPrenom = cellule.getNomPrenom();
            if(nomPrenom != null && !nomPrenom.isEmpty()){
                String[] split = nomPrenom.split(" ");
                String nom = split[0];
                String prenom = split[1];
                String jour = cellule.getJour();

                boolean found = false;
                if(jour.equals(elmSelected.getJour())){
                    if(heureDebut.equals(elmSelected.getHeureDebut()) && heureFin.equals(elmSelected.getHeureFin())){
                        if(!found){
                            int i=0;
                            for(TupleRecherche elm : copie){
                                if(elm.getNom().equals(nom) && elm.getPrenom().equals(prenom)){
                                    found = true;
                                    copie.remove(i);
                                    break;
                                }
                                i++;
                            }
                        }
                    }
                }


                found = false;
                if(Glundi.isSelected()){
                    if(jour.equals(Glundi.getText().toUpperCase())){
                        if(heureDebut.equals(elmSelected.getHeureDebut()) && heureFin.equals(elmSelected.getHeureFin())){
                            if(!found){
                                int i=0;
                                for(TupleRecherche elm : copie){
                                    if(elm.getNom().equals(nom) && elm.getPrenom().equals(prenom)){
                                        found = true;
                                        copie.remove(i);
                                        break;
                                    }
                                    i++;
                                }
                            }
                        }
                    }
                }



                found = false;
                if(Gmardi.isSelected()){
                    if(jour.equals(Gmardi.getText().toUpperCase())){
                        if(heureDebut.equals(elmSelected.getHeureDebut()) && heureFin.equals(elmSelected.getHeureFin())){
                            if(!found){
                                int i=0;
                                for(TupleRecherche elm : copie){
                                    if(elm.getNom().equals(nom) && elm.getPrenom().equals(prenom)){
                                        found = true;
                                        copie.remove(i);
                                        break;
                                    }
                                    i++;
                                }
                            }
                        }
                    }
                }



                found = false;
                if(Gmercredi.isSelected()){
                    if(jour.equals(Gmercredi.getText().toUpperCase())){
                        if(heureDebut.equals(elmSelected.getHeureDebut()) && heureFin.equals(elmSelected.getHeureFin())){
                            if(!found){
                                int i=0;
                                for(TupleRecherche elm : copie){
                                    if(elm.getNom().equals(nom) && elm.getPrenom().equals(prenom)){
                                        found = true;
                                        copie.remove(i);
                                        break;
                                    }
                                    i++;
                                }
                            }
                        }
                    }
                }



                found = false;
                if(Gjeudi.isSelected()){
                    if(jour.equals(Gjeudi.getText().toUpperCase())){
                        if(heureDebut.equals(elmSelected.getHeureDebut()) && heureFin.equals(elmSelected.getHeureFin())){
                            if(!found){
                                int i=0;
                                for(TupleRecherche elm : copie){
                                    if(elm.getNom().equals(nom) && elm.getPrenom().equals(prenom)){
                                        found = true;
                                        copie.remove(i);
                                        break;
                                    }
                                    i++;
                                }
                            }
                        }
                    }
                }



                found = false;
                if(Gvendredi.isSelected()){
                    if(jour.equals(Gvendredi.getText().toUpperCase())){
                        if(heureDebut.equals(elmSelected.getHeureDebut()) && heureFin.equals(elmSelected.getHeureFin())){
                            if(!found){
                                int i=0;
                                for(TupleRecherche elm : copie){
                                    if(elm.getNom().equals(nom) && elm.getPrenom().equals(prenom)){
                                        found = true;
                                        copie.remove(i);
                                        break;
                                    }
                                    i++;
                                }
                            }
                        }
                    }
                }



                found = false;
                if(Gsamedi.isSelected()){
                    if(jour.equals(Gsamedi.getText().toUpperCase())){
                        if(heureDebut.equals(elmSelected.getHeureDebut()) && heureFin.equals(elmSelected.getHeureFin())){
                            if(!found){
                                int i=0;
                                for(TupleRecherche elm : copie){
                                    if(elm.getNom().equals(nom) && elm.getPrenom().equals(prenom)){
                                        found = true;
                                        copie.remove(i);
                                        break;
                                    }
                                    i++;
                                }
                            }
                        }
                    }
                }



                found = false;
                if(Gdimanche.isSelected()){
                    if(jour.equals(Gdimanche.getText().toUpperCase())){
                        if(heureDebut.equals(elmSelected.getHeureDebut()) && heureFin.equals(elmSelected.getHeureFin())){
                            if(!found){
                                int i=0;
                                for(TupleRecherche elm : copie){
                                    if(elm.getNom().equals(nom) && elm.getPrenom().equals(prenom)){
                                        found = true;
                                        copie.remove(i);
                                        break;
                                    }
                                    i++;
                                }
                            }
                        }
                    }
                }
            }
        }

        return copie;
    }

    private void enableJours(boolean value) {
        if(value == true){
            SwingUtils.emptyTable(Gresultat);
        }
        Glundi.setEnabled(value);
        Gmardi.setEnabled(value);
        Gmercredi.setEnabled(value);
        Gjeudi.setEnabled(value);
        Gvendredi.setEnabled(value);
        Gsamedi.setEnabled(value);
        Gdimanche.setEnabled(value);

        Brechercher.setEnabled(value);
        Bvider.setEnabled(value);
        Bretirer.setEnabled(value);
        Bajouter.setEnabled(value);
    }
}
